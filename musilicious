#!/usr/bin/env perl
use strict;
use warnings;
use Mojolicious::Lite;
use Mojo::ByteStream 'b';

use Audio::MPD;
use Scalar::Util qw(blessed);
#use Carp qw(confess); $SIG{__WARN__} = \&confess;
use Data::Dumper;

# Hey, what kinda party is this? There's no booze and only one hooker.


# Looks like Audio::MPD is missing that function, so adding it here
sub Audio::MPD::output_list {
    my ($self, $output) = @_;
    my @outputs;
    my %output;
    for my $line ($self->_send_command("outputs\n"))
    {
        next if $line eq 'outputs';

        my ($k,$v) = split /: /, $line;
        $k =~ s/^output//;

        $output{$k} = $v;
        if ($k eq 'enabled')
        {
            push @outputs, { %output };
            %output = ();
        }
    }
    return @outputs;
}


my %action_map =
(
    playpause => 'pause',
    play => 'play',
    stop => 'stop',
    next => 'next',
    prev => 'prev',
    volume => 'volume',
    seek => 'seek',
    toggle_repeat => 'repeat',
    toggle_random => 'random',
    toggle_xfade => 'fade',
    output_enable => 'output_enable',
    output_disable => 'output_disable',
    playlist_clear => [ 'playlist', 'clear' ],
    playlist_add => [ 'playlist', 'add' ],
    playlist_delete => [ 'playlist', 'deleteid' ],
    'collection_to playlist' => [ 'playlist', 'add' ],
    playlist_play => sub { return ['playid'], [ (shift) ] },
);

my %func_map =
(
    status => ['audio', 'bitrate', 'error', 'playlist', 'playlistlength', 'random', 'repeat', 'songid', 'song', 'state', 'time', 'updating_db', 'volume', 'xfade'],
    stats => [ 'artists', 'albums', 'songs', 'uptime', 'playtime', 'db_playtime', 'db_update' ],
    current => ['album', 'artist', 'date', 'disc', 'file', 'genre', 'id', 'name', 'pos', 'title', 'track', 'time'],
);

my $mpd = Audio::MPD->new(host => 'localhost', port => '6600');

get '/' => sub
{
    my $self = shift;

    $self->render( _status(), playlist => $mpd->playlist );

} => 'index';

get '/tiny' => sub
{
    my $self = shift;
    $self->render( _status() );
} => 'tiny';

get '/collection/(*path)' => { path => '' } => sub
{
    my $self = shift;
    my $path = $self->stash('path');


    my @files = $mpd->collection->items_in_dir($path);

    my @songs =  grep { $_->isa('Audio::MPD::Common::Item::Song') } @files;
    my @playlists =  grep { $_->isa('Audio::MPD::Common::Item::Playlist') } @files;
    my @directories =  grep { $_->isa('Audio::MPD::Common::Item::Directory') } @files;

    my $parent = $path;
    $parent =~ s/\/?[^\/]*$//; # KISS

    $self->render
    (
        songs => \@songs,
        playlists => \@playlists,
        directories => \@directories,
        playlist => $mpd->playlist,
        parent => $parent
    );

} => 'editor';


get '/action/:action/:value' => { value => undef } => sub
{
    my $self = shift;
    my $action = $self->stash('action');
    my $value = $self->stash('value');


    _action($action, $value);
    $self->redirect_to('index');

} => 'action';

post '/action/:source' => sub
{
    my $self = shift;
    my $source = $self->stash('source');
    my @list = $self->param('data');
    my $action = $source . '_' . $self->param('action');

    if ($action_map{$action})
    {
        my $o;
        my $m;

        if (ref $action_map{$action} eq 'CODE')
        {
            my ($target, $value) = $action_map{$action}->(@list);
            ($o, $m) = @$target;

        } else {
            
            ($o, $m) = @{ $action_map{$action} };
        }
        if ($m)
        {
            $mpd->$o->$m(@list);
        } else {
            $mpd->$o(@list);
        }
        $self->redirect_to('index');
    } else
    {
        die "invalid action: $action";
    }

} => 'action_post';


# JSON RPC for Ajax-Requests

get '/rpc/:action/:value' => { action => undef, value => undef } => sub
{
    my $self = shift;
    my $action = $self->stash('action');
    my $value = $self->stash('value');

    _action($action, $value) if $action;

    $self->render_json({ _serialize(_status()) });
} => 'rpc';

post '/rpc/:action' => sub
{
    my $self = shift;
    my @list = $self->param('data[]');
    my $action = $self->stash('action');

    if (my ($o, $m) = @{ $action_map{$action} })
    {
        $mpd->$o->$m(@list);
    }

    $self->render_json({ _serialize(_status()) });
} => 'rpc_post';

# Static file delivery

get '/static/(*path)' => sub
{
    app->static; # ->prefix('/static/');
} => 'static';
# --- 

sub _action
{
    my $q = shift;
    my $value = shift;
    my $action = $action_map{ $q } or die "invalid action: $q";

    warn Dumper($action) . "with: $value\n\n";
    # just try it..
    if (ref $action eq 'ARRAY')
    {
        my ($o, $m) = @$action;
        $mpd->$o->$m($value);
    } else
    {
        $mpd->$action($value);
    }
}

sub _serialize
{
    my %in = @_;
    my %out;
    for my $key (keys %in)
    {
        if (defined blessed $in{$key})
        {
            for my $func (@{ $func_map{$key} })
            {
                $out{$key}->{$func} = $in{$key}->$func;
            }
        } else {
            $out{$key} = $in{$key};
        }
    }
    warn Dumper \%out;
    return %out;
}

sub _status
{
    # TODO: only fetch really needed values i.e. songinfo does not change until the song changes
    my $current = $mpd->current;
    my $status = $mpd->status;
    my $stats = $mpd->stats;

    my ($pos, $length);
    if (my $t = $status->time)
    {
        $pos = $t->seconds_sofar;
        $length = $current->time || '';
    }

    return
    (
         current => $current,
         status => $status,
         length => $length,
         pos => $pos,
         outputs => [ $mpd->output_list ],
    )
}


app->start;

__DATA__

@@ index.html.ep
% layout 'default';
<%= include "player" %>
<%= include "playlist" %>


@@ tiny.html.ep
% layout 'default';
<%= include "player" %>


@@ editor.html.ep
% layout 'default';
<%= include "collection" %>
<%= include "playlist" %>


@@ player.html.ep
<div id="player" class="draggable">
    <div id="display">
        <div id="volume"></div>
        <div class="text">
            <span id="artist"><%= eval { $current->artist } %></span><br />
            <span id="title"><%= eval { $current->title || $current->file } %></span>
            <span id="album">(<%= eval { $current->album } %>)</span>
            <span id="timer"><%= eval { $current->time } %></span>
        </div>
    </div>
    <div id="seek"></div>
    <span id="control">
        <a id="prev"        href="<%= url_for('action', action => 'prev') %>">&#x226a;</a>
        <a id="play"        href="<%= url_for('action', action => 'play') %>">&#x25b6;</a>
        <a id="playpause"   href="<%= url_for('action', action => 'playpause') %>">&#x25ae;&#x25ae;</a>
        <a id="stop"        href="<%= url_for('action', action => 'stop') %>">&#x25a0;</a>
        <a id="next"        href="<%= url_for('action', action => 'next') %>">&#x226b;</a>
    </span>
    <span id="toggles">
        <a id="repeat" class="toggle"
           class="<%= $status->repeat == 0 ? 'disabled' : 'enabled' %>"
           href="<%= url_for('action', action => 'toggle_repeat') %>">
                &#x21ba;
        </a>
%# 3 stright arrows &#x21f6; 

        <a id="random" class="toggle"
            class="<%= $status->random == 0 ? 'disabled' : 'enabled' %>"
            href="<%= url_for('action', action => 'toggle_random') %>">
                &#x2682;
        </a>
        <a id="xfade" class="toggle"
            class="<%= $status->xfade == 0 ? 'disabled' : 'enabled' %>"
            href="<%= url_for('action', action => 'toggle_xfade') %>">
                &asymp;
        </a>
    </span>
    <div id="outputs">
        <ul>
% for my $output (@$outputs) {
            <li><a id="<%= $output->{id} %>" class="<%= $output->{enabled} ? 'enabled' : 'disabled' %>"
                href="<%= url_for('action', action => $output->{enabled} ? 'output_disable' : 'output_enable', value => $output->{id}) %>">
                    <%= $output->{name} %>
            </a></li>
% }
        </ul>
    </div>
<!--    <span id="notes">
    &#x266d; &#x266c; &#x266b; &#x266a; &#x2669;
    </span>
-->
</div>

@@ collection.html.ep
    <div id="collection" class="draggable">
        <h1>Collection</h1>
        <div id="files">
            <h2>Files</h2>
            <form action="<%= url_for 'action_post' %>/collection" method='post'>
                <select name="data" multiple>
% for my $directory (@$directories) {
                    <option value="<%= $directory->directory %>" class="directory"> <%= $directory->directory %>
% }
% for my $song (@$songs) {
                    <option value="<%= $song->file %>" class="song"> <%= $song->directory %>
% }
                </select>
                <input type="submit" name="action" value="to playlist">
                <input type="submit" name="action" value="update db">
            </form>
            JS Button:
            <input type="button" value="add" id="playlist_add" />
            <a href="<%= url_for('editor', path => $parent) %>">back to <%= $parent %></a>
        </div>

        <div id="directories">
            <h2>Directories</h2>
            <ul>
% for my $directory (@$directories) {
                <li><a href="<%= url_for('editor', path => $directory->directory) %>"><%= $directory->directory %></a></li>
% }
            </ul>
        </div>

        <div id="playlists">
            <h2>Playlists</h2>
            <ul>
% for my $playlist (@$playlists) {
                <li>
                    <a href="<%= url_for('action', action => 'playlist_load', value => $playlist->playlist) %>">
                        <%= $playlist->playlist %>
                    </a>
                </li>
% }
            </ul>
        </div>

    </div>

@@ playlist.html.ep
    <div id="playlist" class="draggable">
        <h1>Playlist</h1>
        <h2>Entries</h2>
        <form action="<%= url_for('action_post') %>/playlist" method="post">
            <select name="data" multiple>
% for my $song ( $playlist->as_items ) {
                <option value="<%= $song->id %>">
                    <%= $song->pos %>
                    <%= $song->artist || $song->file %>
                    <%= $song->title %>
                    <%= $song->album %>
                    <%= $song->date %>
                    <%= $song->time %>
                </option>
% }
            </select>
            <input type="submit" name="action" value="delete" />
            <input type="submit" name="action" value="clear" />
            <input type="submit" name="action" value="play" />
        </form>
        JS Button:
    <input type="button" value="clear" id="playlist_clear" />
        <div id="links">
            <p><a href="<%= url_for('editor') %>">editor</a></p>
        </div>
    </div>


@@ layouts/default.html.ep
<!doctype html>
<head>
 <meta charset="utf-8">
 <title>musilicious: <%= eval { $current->artist } %> - <%= eval { $current->title } %></title>
 <style type="text/css">
<!--
    a { text-decoration: none; color: white; }
    html { background-color: black; color: white; }

    h1,h2 { color: gold; }

    #player
    {
        padding: 0px;
        position: absolute;
        border: 1px solid Purple;
        width: auto;
        background-color: DeepPink;
        z-index: 1;
    }

    #display
    {
        background-color: black;
        border: 0.5em ridge DeepPink;
        color: DeepPink;
        height: 50%;
    }

    #display .text { margin-left: 6%; }


    #artist { font-size: 100%; }
    #album { font-size: 50% }
    #control
    {
        display: block;
        margin-top: 2%;
        margin-bottom: 2%;
        margin-left: auto;
        margin-right: auto;
        font-size: 100%;
    }
    #control a
    {
        display: inline-block; /* thx to bedivere for that hint */
        font-size: 100%;
        width: 10%;
        padding: 0.5%;
        color: gold;
        background-color: black;
        border: 3px dotted black;
        text-align: center;
        margin-left: 4%;
    }

    #control a:hover { border-style: inset; }
    #title
    {
        font-size: 80%;
        margin-left: 10%;
    }

    #collection { float: left; min-height: 10em; background-color: #099; width: 50%;}

    #playlist { float: right; min-height: 10em; background-color: silver; width: 50%;}

    select { width: 98%; height: 80%; background-color: black; color: silver; }

    select .directory { font-weight: bold; }

    .enabled { color: white; }
    .disabled { color: purple; }


    .ui-selected { background-color: DeepPink; }
    .ui-selecting { background-color: gold; }

    #volume { float: left; height: 80%; width: 1%; margin-left: 1%; }
    #volume .ui-slider-handle { visibility: hidden; }
    #volume .ui-slider-range { background-color: gold; }

    #seek { margin-left: 1%; margin-right: 1% }
    #seek .ui-slider-handle { visibility: hidden; }
    #seek .ui-slider-range { background-color: gold; }
    
    #toggles { padding: 3%; vertical-align: center; font-size: 150%; }
    #outputs { float: right; }
    #outputs ul { list-style-type: none; font-size: smaller; margin: 0; padding 0; margin-right: 4%; }



-->
 </style>
 <link type="text/css" href="<%= url_for('static', path => 'css/ui-lightness/jquery-ui-1.8.4.custom.css') %>" rel="stylesheet" />   
 <script type="text/javascript" src="<%= url_for('static', path => '/js/jquery-1.4.2.min.js') %>"></script>
 <script type="text/javascript" src="<%= url_for('static', path => '/js/jquery-ui-1.8.4.custom.min.js') %>"></script>
 <script type="text/javascript" src="<%= url_for('static', path => '/js/jquery.dump.js') %>"></script>

 <script>
function update(data)
{

    $("#artist").html(data.artist);
    $("#title").html(data.title);
    $("#album").html(data.album);
    $("#timer").html(data.timer);

    $('#toggles a').each(function(i,v)
    {
        if(data.status[this.id])
        {
            $(this).removeClass('disabled');
            $(this).addClass('enabled');

        } else
        {
            $(this).removeClass('enabled');
            $(this).addClass('disabled');

        }
    });

    $('#outputs a').each(function()
    {
        // hope that index of array equals id of output
        if (data.outputs[this.id].enabled)
        {
            $(this).removeClass('disabled');
            $(this).addClass('enabled');
        } else
        {
            $(this).removeClass('enabled');
            $(this).addClass('disabled');
        }
    });

    $("#volume").slider('option', 'value', data.status.volume);
    $("#seek").slider('option', 'value', data.pos);
    $("#seek").slider('option', 'max', data.length);

}
 
function volume(event, ui)
{
    if(event.originalEvent == undefined) { return };
    var volume = $('#volume').slider('option', 'value');
    rpc('volume', volume);
}

function seek(event, ui)
{
    if(event.originalEvent == undefined) { return };
    var seek = $('#seek').slider('option', 'value');
    rpc('seek', seek);
}

function rpc(action, value)
{
    var href = '<%= url_for('rpc') %>';

    if (action) { href = href + '/' + action }

    if (typeof(value) == 'object')
    {
        $.post(href, {"data": value}, update);
    } else
    {
        if (value) { href = href + '/' + value }

        $.getJSON(href, update);
    }
}

function init()
{
    $("#file_list").selectable();
    $("#play_list").selectable();

    $(".draggable").draggable({start: function (e,u) { $(this).css('z-index', $(this).css('z-index')+1) }});
    $(".draggable").resizable();

    $("#player").css('height', '15em');
    $("#player").css('width', '25em');

    $("#player").resizable("option", "minHeight", 210);
    $("#player").resizable("option", "minWidth", 210);

    $("#volume").slider
    ({
        orientation: 'vertical',
        change: volume,
        range: 'min',
    });

    $("#seek").slider
    ({
        change: seek,
        range: 'min',
    });


    $("#playlist_add").click(function()
    {
        rpc('playlist_add', $("#files .ui-selected").map(function() { return this.innerHTML }).get());
    });
    $("#playlist_clear").click(function() { rpc('playlist_clear') });

    $('#control a').each(function(i,v) { $(this).click(function () { rpc(this.id); return false; }) })
    $('#outputs a').each(function(i,v) { $(this).click(function () {
        if ($(this).attr('class') == 'disabled')
        {
            rpc('output_enable', this.id);
        } else
        {
            rpc('output_disable', this.id);
        }
        return false;
    }) })

    $('#toggles a').each(function(i,v) { $(this).click(function () { rpc("toggle_" + this.id); return false; }) })

}
 $(document).ready(function() { init(); rpc(); setInterval(function() { rpc() }, 3000) });

 </script>
<body>
    <%== content %>
    <br />
    <pre><div id="debug"></div></pre>
</body>
</html>



@@ exception.html.ep
<!doctype html><html>
    <head><title>Error</title></head>
    <body><h2>Error</h2></body>
</html>

